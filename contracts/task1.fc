#include "imports/stdlib.fc";

;; =============== storage =============================

;; storage binary format is defined as TL-B in companion .tlb file

global int public_key_g;
global slice receiver_g;

(int, int, slice, int) load_data() inline {
  var ds = get_data().begin_parse();
  return (
    ds~load_uint(256),  ;; public_key
    ds~load_uint(32),   ;; execution_time
    ds~load_msg_addr(), ;; receiver
    ds~load_uint(32)    ;; seqno
  );
}

() save_data(int public_key, int execution_time, slice receiver, int seqno) impure inline {
  set_data(begin_cell()
    .store_uint(public_key_g, 256)
    .store_uint(execution_time, 32)
    .store_slice(receiver_g)
    .store_uint(seqno, 32)
    .end_cell());
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    
    set_gas_limit(1000000);

    if (in_msg_body.slice_empty?()) { ;; ignore all empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    ;; load from contract storage
    var (public_key, execution_time, receiver, seqno) = load_data();

    ;; handle operations
    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    if (op == 0x9df10277)
    {
        ;; compare signature with public_key after hashing
        slice signature = in_msg_body~load_bits(512);

        cell look_new_seq = in_msg_body~load_ref();
        slice ref_msg = look_new_seq.begin_parse();
        int locked_for = ref_msg~load_uint(32);
        int new_seqno = ref_msg~load_uint(32);
        
        int signature_hash = slice_hash(signature);
        ;; int now() = now();
        ;; ref look and new_seq
        throw_if(119, new_seqno != seqno + 1);
        ;; if (new_seqno != seqno + 1)
        ;; {
        ;;     throw(119);
        ;;     return ();
        ;; }
        throw_unless(120, check_signature(signature_hash,signature,public_key));
        ;; if (check_signature(signature_hash,signature,public_key) == 0)
        ;; ;; if (signature_hash != public_key)
        ;; {
        ;;     throw(120);
        ;;     return ();
        ;; }

        throw_if(121, locked_for <= 0);
        ;; if (locked_for <= 0)
        ;; {
        ;;     throw(121);
        ;;     return ();
        ;; }
        throw_if(122, execution_time < now());
        ;; if (execution_time < now())
        ;; {
        ;;     throw(122);
        ;;     return ();
        ;; }
        int new_execution_time = now() + locked_for;
        throw_if(123, new_execution_time <= execution_time);
        
        ;; if (now() + locked_for < execution_time)
        ;; {
        ;;     throw(123);
        ;;     return ();
        ;; }
        seqno = new_seqno;
        execution_time = now() + locked_for;
        save_data(public_key, execution_time, receiver, seqno);
        return ();
    }
    if (op == 0xbb4be234)
    {
        throw_if(124, execution_time >= now());
        ;; if (execution_time > now())
        ;; {
        ;;     throw(124);
        ;;     return ();
        ;; }
        cell msg = begin_cell()
            .store_uint(0x18, 6) ;; flags
            .store_slice(receiver) ;; destination address
            .store_coins(100000) ;; we don't care about this value right now
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1) ;; default message headers (see sending messages page)
            ;; .store_uint(0, 32) ;; zero opcode - means simple transfer message with comment
        .end_cell();
        
        ;; var msg = begin_cell()
        ;;     .store_uint(0, 1) ;; tag
        ;;     .store_uint(1, 1) ;; ihr_disabled
        ;;     .store_uint(1, 1) ;; allow bounces
        ;;     .store_uint(0, 1) ;; not bounced itself
        ;;     .store_uint(0, 2)
        ;;     .store_slice(receiver)
        ;;     ;; serialize CurrencyCollection (see below)
        ;;     .store_coins(0)
        ;;     .store_coins(0)
        ;;     .store_coins(0) ;; ihr_fee
        ;;     .store_coins(0) ;; fwd_fee 
        ;;     .store_uint(cur_lt(), 64) ;; lt of transaction
        ;;     .store_uint(now(), 32) ;; unixtime of transaction
        ;;     .store_uint(0,  1) ;; no init-field flag (Maybe)
        ;;     .store_uint(0,  1) ;; inplace message body flag (Either)
        ;; .end_cell();

        send_raw_message(msg, 128); ;; mode = 128 is used for messages that are to carry all the remaining balance of the current smart contract
        ;; Transfer
        return ();
    }
    return();
}

;; =============== getters =============================


int get_seqno() method_id {
  var (_, _, _, seqno) = load_data();
  return seqno;
}

int get_execution_time() method_id {
  var (_, execution_time, _, _) = load_data();
  return execution_time;
}
